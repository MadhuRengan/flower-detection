
import numpy as np
import tensorflow as tf
from keras.preprocessing.image import ImageDataGenerator
tf.__version__
'2.5.0'
train_datagen = ImageDataGenerator(
        rescale=1./255,
        shear_range=0.2,
        zoom_range=0.2,
        horizontal_flip=True)
training_set = train_datagen.flow_from_directory(
        'training_set',
        target_size=(64, 64),
        batch_size=32,
        class_mode='categorical')
Found 3155 images belonging to 5 classes.
test_datagen = ImageDataGenerator(rescale=1./255)
test_set = test_datagen.flow_from_directory(
        'test_set',
        target_size=(64, 64),
        batch_size=32,
        class_mode='categorical')
Found 1162 images belonging to 5 classes.
cnn = tf.keras.models.Sequential()
cnn.add(tf.keras.layers.Conv2D(filters=64 , kernel_size=3 , activation='relu' , input_shape=[64,64,3]))
cnn.add(tf.keras.layers.MaxPool2D(pool_size=2,strides=2))
cnn.add(tf.keras.layers.Conv2D(filters=64 , kernel_size=3 , activation='relu' ))
cnn.add(tf.keras.layers.MaxPool2D(pool_size=2 , strides=2))
cnn.add(tf.keras.layers.Dropout(0.5))
cnn.add(tf.keras.layers.Flatten())
cnn.add(tf.keras.layers.Dense(units=128, activation='relu'))
cnn.add(tf.keras.layers.Dense(units=5 , activation='softmax'))
cnn.compile(optimizer = 'rmsprop' , loss = 'categorical_crossentropy' , metrics = ['accuracy'])
cnn.fit(x = training_set , validation_data = test_set , epochs = 30)
Epoch 1/30
99/99 [==============================] - 36s 359ms/step - loss: 1.3975 - accuracy: 0.4111 - val_loss: 1.1670 - val_accuracy: 0.5301
Epoch 2/30
99/99 [==============================] - 35s 353ms/step - loss: 1.1386 - accuracy: 0.5550 - val_loss: 0.9857 - val_accuracy: 0.6170
Epoch 3/30
99/99 [==============================] - 35s 351ms/step - loss: 1.0201 - accuracy: 0.6029 - val_loss: 0.9857 - val_accuracy: 0.6110
Epoch 4/30
99/99 [==============================] - 35s 352ms/step - loss: 0.9606 - accuracy: 0.6412 - val_loss: 1.0379 - val_accuracy: 0.6059
Epoch 5/30
99/99 [==============================] - 35s 351ms/step - loss: 0.8850 - accuracy: 0.6564 - val_loss: 0.9378 - val_accuracy: 0.6351
Epoch 6/30
99/99 [==============================] - 35s 357ms/step - loss: 0.8297 - accuracy: 0.6922 - val_loss: 0.8273 - val_accuracy: 0.6773
Epoch 7/30
99/99 [==============================] - 35s 351ms/step - loss: 0.8006 - accuracy: 0.6872 - val_loss: 0.9772 - val_accuracy: 0.6386
Epoch 8/30
99/99 [==============================] - 35s 355ms/step - loss: 0.7666 - accuracy: 0.7132 - val_loss: 1.0767 - val_accuracy: 0.6179
Epoch 9/30
99/99 [==============================] - 35s 352ms/step - loss: 0.7536 - accuracy: 0.7128 - val_loss: 0.9531 - val_accuracy: 0.6360
Epoch 10/30
99/99 [==============================] - 38s 385ms/step - loss: 0.6852 - accuracy: 0.7414 - val_loss: 0.8517 - val_accuracy: 0.6773
Epoch 11/30
99/99 [==============================] - 35s 349ms/step - loss: 0.7076 - accuracy: 0.7401 - val_loss: 0.7937 - val_accuracy: 0.7126
Epoch 12/30
99/99 [==============================] - 35s 351ms/step - loss: 0.6565 - accuracy: 0.7521 - val_loss: 1.0537 - val_accuracy: 0.6360
Epoch 13/30
99/99 [==============================] - 35s 349ms/step - loss: 0.6417 - accuracy: 0.7658 - val_loss: 0.9639 - val_accuracy: 0.6523
Epoch 14/30
99/99 [==============================] - 35s 352ms/step - loss: 0.6140 - accuracy: 0.7705 - val_loss: 0.8116 - val_accuracy: 0.7022
Epoch 15/30
99/99 [==============================] - 35s 349ms/step - loss: 0.6009 - accuracy: 0.7810 - val_loss: 0.8764 - val_accuracy: 0.7031
Epoch 16/30
99/99 [==============================] - 35s 354ms/step - loss: 0.5862 - accuracy: 0.7819 - val_loss: 0.8276 - val_accuracy: 0.7143
Epoch 17/30
99/99 [==============================] - 35s 351ms/step - loss: 0.5698 - accuracy: 0.7921 - val_loss: 0.8858 - val_accuracy: 0.6876
Epoch 18/30
99/99 [==============================] - 35s 352ms/step - loss: 0.5454 - accuracy: 0.8041 - val_loss: 0.9406 - val_accuracy: 0.6928
Epoch 19/30
99/99 [==============================] - 35s 351ms/step - loss: 0.5463 - accuracy: 0.7921 - val_loss: 0.8107 - val_accuracy: 0.7212
Epoch 20/30
99/99 [==============================] - 35s 352ms/step - loss: 0.5155 - accuracy: 0.8158 - val_loss: 0.8690 - val_accuracy: 0.7134
Epoch 21/30
99/99 [==============================] - 34s 348ms/step - loss: 0.4990 - accuracy: 0.8231 - val_loss: 0.8848 - val_accuracy: 0.7100
Epoch 22/30
99/99 [==============================] - 35s 349ms/step - loss: 0.4910 - accuracy: 0.8276 - val_loss: 1.0237 - val_accuracy: 0.6885
Epoch 23/30
99/99 [==============================] - 35s 353ms/step - loss: 0.4647 - accuracy: 0.8311 - val_loss: 1.2041 - val_accuracy: 0.6644
Epoch 24/30
99/99 [==============================] - 35s 352ms/step - loss: 0.4675 - accuracy: 0.8314 - val_loss: 1.3878 - val_accuracy: 0.5955
Epoch 25/30
99/99 [==============================] - 35s 352ms/step - loss: 0.4591 - accuracy: 0.8336 - val_loss: 0.8995 - val_accuracy: 0.7126
Epoch 26/30
99/99 [==============================] - 35s 353ms/step - loss: 0.4403 - accuracy: 0.8485 - val_loss: 0.8973 - val_accuracy: 0.7126
Epoch 27/30
99/99 [==============================] - 35s 351ms/step - loss: 0.4238 - accuracy: 0.8447 - val_loss: 1.5098 - val_accuracy: 0.5947
Epoch 28/30
99/99 [==============================] - 35s 351ms/step - loss: 0.4023 - accuracy: 0.8586 - val_loss: 1.0196 - val_accuracy: 0.6962
Epoch 29/30
99/99 [==============================] - 35s 351ms/step - loss: 0.4026 - accuracy: 0.8507 - val_loss: 1.0274 - val_accuracy: 0.7117
Epoch 30/30
99/99 [==============================] - 35s 351ms/step - loss: 0.3989 - accuracy: 0.8564 - val_loss: 1.0510 - val_accuracy: 0.7005
<tensorflow.python.keras.callbacks.History at 0x25d03004130>
from keras.preprocessing import image
test_image = image.load_img('Prediction/daisy.jpg',target_size=(64,64))
test_image = image.img_to_array(test_image)
test_image = np.expand_dims(test_image,axis=0)
result = cnn.predict(test_image)
training_set.class_indices
{'daisy': 0, 'dandelion': 1, 'rose': 2, 'sunflower': 3, 'tulip': 4}
if result[0][0]==1:
    print('Daisy')
elif result[0][1]==1:
    print('Dandelion')
elif result[0][2]==1:
    print('Rose')
elif result[0][3]==1:
    print('SunFlower')
elif result[0][4]==1:
    print("Tulip")
Daisy
print(result)
[[1. 0. 0. 0. 0.]]
 